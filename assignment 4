""" A little something to get you started """
# import datetime    #this will be handy later
import os          #this will be handy later
SHORT_NAME_LENGTH = 10
class Site():
    """ A site class to records steps etc for a site """

    def __init__(self, site_id, description, region, equipment, pc_heavy):
        """ Sets up the site.
        pc_heavy is a percentage as a float. Note: 50.0 means 50%, 0.50 means 0.5%
        All other parameters are strings.
        """
        self.site_id = site_id
        self.description = description
        self.region = region
        self.equipment = equipment
        self.pc_heavy = pc_heavy
        self.total_vehicle_count = 0
        self.first_record_date = None
        self.last_record_date = None
        
        
    def add_daily_count(self, date_str, count):
        """Take a date string and vehicle count updates the total vehicles
        for the given Site along with the earliest / latest vehicle count"""
        #checks if last date is none if it is sets it to current date
        #then checks if next date is higher.
        if self.last_record_date is None:
            self.last_record_date = date_str  
        elif date_str > str(self.last_record_date):
            self.last_record_date = date_str            
        
        if date_str < str(self.first_record_date):
            self.first_record_date = date_str
        
        self.total_vehicle_count = self.total_vehicle_count + count


    def short_name(self):
        """ Returns a truncated version of the first part of the description
        ie, before the - """
        short_description, _ = self.description.split('-')
        short_description = short_description.strip()
        if len(short_description) > SHORT_NAME_LENGTH:
            short_description = short_description[:SHORT_NAME_LENGTH] + '...'
        return short_description

    def region_code(self):
        """ Returns the region number from the region string """
        region_num, _ = self.region.split('-')
        return region_num.strip()
    
    def region_name(self):
        """ Returns the region number from the region string """
        _, region_name = self.region.split('-')
        return region_name.strip()

    def __str__(self):
        result = ''
        result += '-'*50 + '\n'
        result += 'Site Id: {}\n'.format(self.site_id)
        result += 'Region code: {}\n'.format(self.region_code())
        result += 'Description: {}\n'.format(self.description)
        result += 'Region name: {}\n'.format(self.region_name())
        result += 'Equipment: {}\n'.format(self.equipment)
        result += 'Total vehicles: {}\n'.format(self.total_vehicle_count)
        result += '% Heavy Vehicles: {:.2f}\n'.format(self.pc_heavy)
        result += 'First date recorded: {}\n'.format(self.first_record_date)
        result += 'Last date recorded: {}\n'.format(self.last_record_date)
        result += '-'*50
        return result

    def __repr__(self):
        template = 'Site({}, {})'
        return template.format(self.site_id, self.short_name())

    
def extract_site(lines, start_index=0):
    """Takes the input of a string of lines and the starting line index value
    then takes the index value skips to the next line then strip the line
    then returns it to the Site class repeating for all 5 items to be 
    extracted."""
    site_id = lines[start_index+1].strip().split(':')[1]
    description = lines[start_index+2].strip().split(':')[1]
    region = lines[start_index+3].strip().split(':')[1]
    equipment = lines[start_index+4].strip().split(':')[1]
    pc_heavy = lines[start_index+5].strip().split(':')[1]
    
    return Site(site_id, description, region, equipment, float(pc_heavy))


def read_sites_from_lines(lines):
    
    """takes the list of lines calls the read_file function to find the 
    index value of all the begin site data. then calls the extra_site function
    to add all aspects to a dictionary from the Site class values held"""
    result = {}
    line_index = read_file(lines)
    for line_num in line_index:
        site = extract_site(lines, line_num)
        result[site.site_id] = site
    return(result)
           

def read_file(lines):
    """reads the file returning a list of position that begin site data"""
    data = []
    for i, value in enumerate(lines):
        if value == '<begin site data>\n':
            data.append(i)
    return(data)


    
def add_vehicle_readings(lines, sites):
    """takes the string of lines finds the start and end of begin vehicle data
    then extracts the infomation between those pounts splliting it up on 
    the : returning a list all split up as format siteid , date, list of car count"""
    start_index = lines.index('<begin vehicle data>\n')
    end_of_line = lines.index('<end vehicle data>\n', start_index + 1)
    for indexnumber in range(start_index + 1, end_of_line):  
        site_id = lines[indexnumber].strip().split(':')[0]
        date = lines[indexnumber].strip().split(':')[1]
        carlist = lines[indexnumber].strip().split(':')[2]
        carlist = carlist.split(',') 
        totalcars = 0
        for cars in carlist:
            totalcars = totalcars + int(cars)
            #add_daily_count(date, totalcars)
        site = sites[site_id] # looks up the current item in the dictionary / assign value
        site.add_daily_count(date, totalcars) # calls the add_daily_count method to adjust
        
def input_file():
    """opens a file if it exists else says file doesn't exist then requests another
    input file name"""
      # open file function
    filename = input('Input file name? ')
    while not os.path.isfile(filename):
        print('File does not exist.')
        filename = input('Input file name? ')
    lines = open(filename).readlines()
    return(lines)

def heavy_summary(site_info):
    """Takes the input variables from dictionary site_info and 
    finds the min max and average heavy_pc and prints these values out."""
    totalcount = 0
    counter = 0
    heavymin = None
    heavymax = None
    for site in site_info.values():
        totalcount = totalcount + float(site.pc_heavy)
        counter = counter + 1
        if heavymax is None:
            heavymax = site.pc_heavy
        elif site.pc_heavy > heavymax:
            heavymax = site.pc_heavy
            
        if heavymin is None:
            heavymin = site.pc_heavy
        elif site.pc_heavy < heavymin:
            heavymin = site.pc_heavy
        
    average = (totalcount / counter)
    print('min % Heavy = {:.2f}'.format(heavymin))
    print('avg % Heavy = {:.2f}'.format(average))
    print('max % Heavy = {:.2f}'.format(heavymax))


def total_vehicle_summary(site_info):
    """prints out total vehicles in sorted order by lowest to highest 
    total vehicles  - takes input site_info/dictionary """
    summary_display = '{:<8}: {:15} ={:8}' 
    data = []
    for site in site_info.values():
        #print(summary_display.format(site.site_id, site.short_name(), site.total_vehicle_count))
        data.append((site.total_vehicle_count, site.site_id, site.short_name()))
        data.sort()
    for item in range(len(data)):
        site_id = data[item][0]
        date = data[item][1]
        shorty = data[item][2]

        print(summary_display.format(date, shorty, site_id))
def main():
    """main program calls all the functions needed and prints titles """
    file_extract = input_file()
    site_info = read_sites_from_lines(file_extract)
    add_vehicle_readings(file_extract, site_info)
    print("%d sites loaded" % len(site_info))
    print('')
    print('% Heavy summary:')
    heavy_summary(site_info)
    print('')
    print("Total vehicles summary:")
    total_vehicle_summary(site_info)
    
main()

